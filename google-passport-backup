//Configuring Passport
passport.serializeUser(function(user, done) {
  done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  User.findById(id, function(err, user) {
    done(err, user);
  });
});

var GoogleStrategy = require('passport-google').Strategy;

function user_info(){
  this.username = "",
  this.openId = ""
}

var user_table = [];

var User = {
  findOrCreate : function(info){
    var found = false;
    for(var i =0; i < user_table.length; i++){
      if(user_table[i].openId == info.openId){
        found = true;
      }
    }

    if(!found){
      var newUser = new user_info;
      newUser.openId = info.openId;
      user_table.push(new user_info);
    }
  }

}

passport.use(new GoogleStrategy({
    returnURL: 'http://localhost:3000/auth/google/return',
    realm: 'http://localhost:3000/'
  },
  function(identifier, profile, done) {
    User.findOrCreate({ openId: identifier }, function(err, user) {
      done(err, user);
    });
  }
));

// Redirect the user to Google for authentication.  When complete, Google
// will redirect the user back to the application at
//     /auth/google/return
app.get('/auth/google', passport.authenticate('google'));

// Google will redirect the user to this URL after authentication.  Finish
// the process by verifying the assertion.  If valid, the user will be
// logged in.  Otherwise, authentication has failed.
app.get('/auth/google/return', 
  passport.authenticate('google', { successRedirect: '/',
                                    failureRedirect: '/login' }));
